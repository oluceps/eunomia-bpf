name: Build and test ecli on Ubuntu

on:
  push:
    branches: ["*"]
    paths:
      - "ecli/**"
      - "compiler/**"  # Ensure ecc and ecli releasing at same time
      - "wasm-rumtime/**"  # Release when dependencies updated
      - "third_party/**"
      - "bpf-loader/**"
      - "eunomia-sdk/**"
      - ".github/**"

  pull_request:
    branches: ["*"]
    paths:
      - "ecli/**"
      - "compiler/**"
      - "wasm-rumtime/**"
      - "third_party/**"
      - "bpf-loader/**"
      - "eunomia-sdk/**"
      - ".github/**"
env:
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local

jobs:
  build:

    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-gnu ]

    steps:
    - uses: actions/checkout@v2

    - name: get submodule
      run:  git submodule update --init --recursive --remote

    - name: install deps
      run: |
          sudo make -C ecli install-deps
          sudo make -C bpf-loader install-deps

    - name: cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ${{ github.workspace }}/${{ env.INSTALL_LOCATION }}
        key: ${{ runner.os }}-dependencies

    - name: make ecli
      run:  make ecli

    - name: make minimal ecli
      run:  make -C ecli/minimal

      # All scripts below only run while pushing to master branch.
    - name: Set latest release version
      if:   github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: set_version
      uses: actions/github-script@v3
      with:
        result-encoding: string
        script: |
          const { data: releases } = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          if (releases.length === 0) { return "v0.0.1"; }
          
          async function getReleaseForCommitSha(commitSha) {
            const { owner, repo } = context.repo;
            const { data: releases } = await github.repos.listReleases({ owner, repo });
            console.log(releases);
            return releases.find(release => (release.target_commitish === commitSha));
          }
          
          function increase_v(version) {
            const parts = version.split(".");
            const last = parseInt(parts[2]) + 1;
            const next_version = `${parts[0]}.${parts[1]}.${last.toString()}`;
            return next_version;
          }
          
          console.log(context.sha);
          const coresp_release = await getReleaseForCommitSha(context.sha);
          const latest_release_tag = releases[0].tag_name;
          console.log("coresp_release: " + coresp_release);
          console.log("latest_release_tag: " + latest_release_tag);
          
          if (coresp_release === undefined) {
            return increase_v(latest_release_tag)
          }
          
          const coresp_release_tag = coresp_release.tag_name;
          
          console.log("coresponding release tag is: " + coresp_release_tag)
          console.log("SHA of this commit: " + sha)
          
          return latest_release_tag        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package
      if:   github.event_name == 'push' && github.ref == 'refs/heads/master'
      shell: bash
      run: |
        mkdir release
        cp ecli/target/release/ecli ./release/
        cd release
        tar czvf ./ecli-${{ matrix.target }}-${{ steps.set_version.outputs.result }}.tar.gz ecli

    - name: Publish
      if:   github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      with:
          files: |
            release/ecli-${{ matrix.target }}-${{ steps.set_version.outputs.result }}.tar.gz
          prerelease: false
          tag_name: ${{ steps.set_version.outputs.result }}
          generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
